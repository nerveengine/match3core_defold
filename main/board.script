-- board.script
go.property("timer", 0)     -- Use to time events
local blocks_center_spacing = 80        -- Distance between block centers
local blocks_offset = 2
local blocks_scale = vmath.vector3(1)
local edge = 20             -- Left and right edge.
local bottom_edge = 50      -- Bottom edge.
local board_width = 0        -- Number of columns
local board_height = 0       -- Number of rows
local colors = { hash("000"), hash("001"), hash("002"), hash("003"), hash("004"), hash("005"), hash("006"), hash("007"), hash("008"), hash("009"), hash("010")}
-- local portals_in_sprites = { hash("portal_in_01"), hash("portal_in_02"), hash("portal_in_03"), hash("portal_in_04") }
-- local portals_out_sprites = { hash("portal_out_01"), hash("portal_out_02"), hash("portal_out_03"), hash("portal_out_04") }
local empty_cell = hash("empty_cell")
local drag_x1 = -1 -- x и y выбранной ячейки
local drag_y1 = -1
local drag_x2 = -1
local drag_y2 = -1
local sel_x1 = -1
local sel_y1 = -1
local z_offset_multiplier = -0.01
local view_pixel_width = 640 --то же число что задано в свойствах проекта как ширина

local chip_factory = require "main.chip_factory" 
-- local block_addresses = {}

--
-- filter(function, table)
-- e.g: filter(is_even, {1,2,3,4}) -> {2,4}
--
local function filter(func, tbl)
	local new = {}
	for i, v in pairs(tbl) do
		if func(v) then
			new[i] = v
		end
	end
	return new
end

local function find(func, tbl)
	for i, v in pairs(tbl) do
		if func(v) then
			return 1, v
		end
	end
	return 0, 0
end

--
-- Build a list of blocks in 1 dimension for easy filtering
--
local function build_chiplist(self)
	self.chips = {}
	-- print("build_chiplist")
	for x, l in pairs(self.board) do
		for y, b in pairs(self.board[x]) do
			if b.chip_uid ~= 0 then
				table.insert(self.chips, { id = b.id, chip_uid = b.chip_uid, color = b.color, x = b.x, y = b.y})
				-- print (b.id, b.chip_uid)
			end
		end
	end
end


local function build_frame(self)
	local pos = vmath.vector3()
	pos.x = 100
	pos.y = 100

	local id = factory.create("#framefactory", pos, nil, { part = hash("tile_lb") }) 
	-- pos.x = 200
	-- pos.y = 200
	-- go.set_position(pos, id)

	-- go.set_position(pos, "/frame")
	-- go.set_scale(0.5, "/frame")
	-- go.set("/frame#sprite", "size.x", 64)
	-- go.set("/frame#sprite", "size.y", 64)
	-- go.set("/frame", "position", pos)
	-- go.set("/frame", "position.x", 80)
	-- go.set("/frame", "position.y", 90)
	-- go.set("/frame", "scale.x", 0.5)
	-- go.set("/frame", "scale.y", 0.5)
end

---Преобразует y модели в y вида и наоборот.
--- т.е. переворачивает y
---@param y integer
---@return integer
local function convertY(y)
	return board_height - y - 1
end


local function build_board(self, width, height, board_layers)
	print("build_board width, height, board_layers", width, height, board_layers)

	board_width = width
	board_height = height

	blocks_center_spacing = (view_pixel_width-edge*2) / board_width
	blocks_scale = vmath.vector3( blocks_center_spacing / (64.0 + blocks_offset) )
	print("blocks spacing and scale", blocks_center_spacing, blocks_scale)
	chip_factory.setScale(blocks_scale)

	self.board_cells = {}
	self.portal_cells = {}

	-- парсинг признаков, включена ли ячейка
	local pos = vmath.vector3()
	for model_x = 0,board_width-1 do
		pos.x = edge + blocks_center_spacing / 2 + blocks_center_spacing * model_x
		self.board_cells[model_x] = {}
		self.portal_cells[model_x] = {}
		for model_y = 0,board_height-1 do
			local view_y = convertY(model_y)
			pos.y = bottom_edge + blocks_center_spacing / 2 + blocks_center_spacing * view_y
			local is_enabled = board_layers.cells[model_x][model_y].enabled
			self.board_cells[model_x][model_y] = { is_enabled = is_enabled } -- выставляем свойство

			-- порталы создаём прямо в этом цикле
			local portal_id = board_layers.portals[model_x][model_y].portal_id
			if portal_id ~= -1 then
				pos.z = model_x * z_offset_multiplier + model_y * 0.01 - 0.2
				-- FIXME: z-order
				-- print ("portal", pos);
				local portal_in = board_layers.portals[model_x][model_y].portal_in
				
				id = factory.create("#portalfactory", pos, nil, {portal_id = portal_id, portal_in = portal_in}, blocks_scale)
				self.portal_cells[model_x][model_y] = {id = id, portal_id = portal_id, portal_in = portal_in}
			end
		end
	end

	-- парсинг цветов ячеек
	pos = vmath.vector3()
	for model_x = 0,board_width-1 do
		pos.x = edge + blocks_center_spacing / 2 + blocks_center_spacing * model_x
		self.board[model_x] = {}
		for model_y = 0,board_height-1 do
			local view_y = convertY(model_y)
			pos.y = bottom_edge + blocks_center_spacing / 2 + blocks_center_spacing * view_y
			-- Calc z
			pos.z = model_x * z_offset_multiplier + model_y * 0.01
			-- print ("chip", pos);
			local match_id = board_layers.chips[model_x][model_y].match_id
			local chip_uid = board_layers.chips[model_x][model_y].chip_uid
			local chip = board_layers.chips[model_x][model_y]
			-- print("chip_uid", chip_uid)
			local c
			if match_id < 0 then
				c = empty_cell
			else
				c = colors[match_id]
			end
			-- if self.board_cells[model_x][model_y].is_enabled then -- проверка не имеет смысла, т.к. место для фишки на стороне C++ определяется
				local id = chip_factory.create_chip(chip, pos)
				-- local url = msg.url(nil, id, "block")	-- задание chip_uid через url. Или можно как color задать (см. выше)
				-- go.set(url, "chip_uid", chip_uid)
				-- print ("created chip ", c, model_x, model_y, "at", pos, "with id", id)
				self.board[model_x][model_y] = { id = id, color = c, chip_uid = chip_uid, x = model_x, y = model_y } -- или свойство chip_uid можно хранить внутри поля
			-- end
		end
	end
	

	-- Build 1d list that we can easily filter.
	build_chiplist(self)
end

--
-- Set removed chips to nil
--
local function nilremoved(self)
	for y = 0,board_height - 1 do
		for x = 0,board_width - 1 do
			if self.board[x][y] == hash("removing") then
				self.board[x][y] = nil
			end
		end
	end
end

---
--- Callback from C++
---
local function set_board(self, width, height, board_layers)
 -- full board reset
	print("set_board: width, height, board, chips", width, height, board_layers)
	-- clear board
	print ("removing")
	for model_x = 0,board_width-1 do
		for model_y = 0,board_height-1 do
			local cell = self.board[model_x][model_y]
			if cell then
				go.delete(cell.id)
			end
			local portal = self.portal_cells[model_x][model_y]
			if portal then
				go.delete(portal.id)
			end
		end
	end
	msg.post("/board#board_ui", "set_score", {score = 0})
	-- fill board
	build_board(self, width, height, board_layers)
end

---
--- Callback from C++
---
local function update_board(self, width, height, board_layers)
	-- smart board update
	print("set_board: width, height, board, chips", width, height, board_cells, board_chips)
	local pos = vmath.vector3()
	for model_x = 0,board_width-1 do
		pos.x = edge + blocks_center_spacing / 2 + blocks_center_spacing * model_x
		self.board[model_x] = {}
		for model_y = 0,board_height-1 do
			local view_y = convertY(model_y)
			pos.y = bottom_edge + blocks_center_spacing / 2 + blocks_center_spacing * view_y
			-- Calc z
			pos.z = model_x * z_offset_multiplier + model_y * 0.01
			local match_id = board_layers.chips[model_x][model_y].match_id
			local chip_uid = board_layers.chips[model_x][model_y].chip_uid
			local chip = board_layers.chips[model_x][model_y]
			-- print("chip_uid", chip_uid)
			local c
			if match_id < 0 then
				c = empty_cell
			else
				c = colors[match_id]
			end
			local find_count, find_res = find(function (block)
				return (block.chip_uid == chip_uid)
			end, self.chips)
			-- print(find_count, find_res)
			if find_count > 0 then
				if math.abs(find_res.x - model_x) > 0 or math.abs(find_res.y - model_y) > 0 then
					-- если фишка перемещена
					-- проверим, не портал ли
					if self.portal_cells[model_x][model_y] and not self.portal_cells[model_x][model_y].portal_in then
						-- отображаем анимацию телепортации. Для этого удаляем гошку в одном месте и создаём в другом. Конечно можно сделать и без удаления, но это как пример что так тоже можно.
						msg.post(find_res.id, hash("portal_out"))
						find_res.id = chip_factory.create_chip(chip, pos)
						msg.post(find_res.id, hash("portal_in"))
					else
						local duration = 0.3
						go.animate(find_res.id, "position.y", go.PLAYBACK_ONCE_FORWARD, pos.y, go.EASING_OUTBOUNCE, duration)
						go.animate(find_res.id, "position.x", go.PLAYBACK_ONCE_FORWARD, pos.x, go.EASING_OUTBOUNCE, duration)
					end
				end
				-- нужно так же обновить цвет, т.к. это может быть перезагрузка поля
				-- так не сработало - говорит нет свойства color. Без поиска и без уточнения block - то же самое
				-- local url = msg.url(nil, id, "block")	-- задание chip_uid через url. Или можно как color задать (см. выше)
				-- go.set(url, "color", с)
				-- и, кстати для смены спрайта изменение свойства похоже не подошло бы. потому что на спрайт меняется не свойством, а «анимацией»
				local params = {color = c}
				msg.post(find_res.id, hash("set_color"), params)
				self.board[model_x][model_y] = { id = find_res.id, color = c, chip_uid = chip_uid, x = model_x, y = model_y } -- или свойство chip_uid можно хранить внутри поля
			elseif chip_uid ~= 0 then
				local id = chip_factory.create_chip(chip, pos)
				self.board[model_x][model_y] = { id = id, color = c, chip_uid = chip_uid, x = model_x, y = model_y } -- или свойство chip_uid можно хранить внутри поля
			end
		end
	end
	local prev_chips = self.chips -- чтобы потом удалить пропавшие
	build_chiplist(self)

	-- удаляем пропавшие
	print ("removing")
	for i, v in pairs(prev_chips) do
		local count, res = find (function (block)
			return (block.chip_uid == v.chip_uid)
		end, self.chips)
		-- print ("marking", count, v)
		if count == 0 then
			--go.delete(v.id)
			-- тут можно передавать сколько очков должна принести фишка при удалении
			msg.post(v.id, hash("remove"), {score_points = 50})
			if v.chip_uid % 10 == 0 then
				-- демонстрация бонусных очков
				msg.post("/board#board_ui", "bonus_score", {score = 100})
			end
		end
	end
end


function draw_imgui(self)
	if imgui.begin_window("Field state", nil, nil) then
		imgui.begin_table("chips", board_width)

		for model_y = 0,board_height-1 do
			imgui.table_next_row()
			for model_x = 0,board_width-1 do
				imgui.table_next_column()
				local view_y = convertY(model_y)
				local chip = self.board[model_x][model_y]
				local text = "~"
				local should_tint = false
				if chip then
					text = chip.id .. ":\nuid:" .. chip.chip_uid .. ",color:" .. chip.color
					should_tint = (chip.chip_uid == 0)
				end
				if should_tint then
					imgui.text_colored(text, 1, 0.5, 0.5, 1 )
				else
					imgui.text(text)
				end
			end
		end
		imgui.end_table()
		
	end
	imgui.end_window()
end

function init(self)
	-- Add initialization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed

	self.board_cells = {}       -- свойства ячеек поля
	self.board = {}             -- Contains the board structure
	self.portal_cells = {}		-- порталы
	self.chips = {}             -- List of all blocks. Used for easy filtering on selection.
	myextension.setupSetFieldCallback(set_board)    -- Ставим колбэк на замену поля
	myextension.setupUpdateFieldCallback(update_board) -- Ставим колбэк на обновление поля
	msg.post(".", "acquire_input_focus")
	msg.post("#", "start_level")

	setupImgui(self)
	
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
	-- if myextension.needPull() then
	-- 	local width, height, board_cells, board_chips = myextension.getGameArea()
	-- 	set_board(self, width, height, board_cells, board_chips)
	-- end
	draw_imgui(self)
	
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
	if message_id == hash("start_level") then
		-- запрашиваем поле на старте
		local width, height, board_layers = myextension.getGameArea()
		build_board(self, width, height, board_layers)
	end
end

local function animateSelect(self, x, y)
	local slot = self.board[x][y]
	msg.post(slot.id, "select")
end

local function resetAnimation(self, x, y)
	local slot = self.board[x][y]
	msg.post(slot.id, "reset")
end

local function resetDrag(self)
	if drag_x1 ~= -1 and drag_y1 ~= -1 then
		-- print (drag_x1, drag_y1, self.board)
		resetAnimation(self, drag_x1, drag_y1)
		drag_x1 = -1
		drag_y1 = -1
	end
	if drag_x2 ~= -1 and drag_y2 ~= -1 then
		resetAnimation(self, drag_x2, drag_y2)
		drag_x2 = -1
		drag_y2 = -1
	end
end

local function hasDragging(self)
	return (drag_x1 ~= -1 and drag_y1 ~= -1)
end

local function setDrag1(self, x, y)
	drag_x1 = x
	drag_y1 = y
	animateSelect(self, drag_x1, drag_y1)
end

local function setDrag2(self, x, y)
	drag_x2 = x
	drag_y2 = y
	animateSelect(self, drag_x2, drag_y2)
end

local function hasSelection(self)
	return (sel_x1 ~= -1 and sel_y1 ~= -1)
end

local function setSelected(self, x, y)
	animateSelect(self, x, y)
	-- print ("selected", slot.id)
	sel_x1 = x
	sel_y1 = y
end

local function resetSelected(self)
	resetAnimation(self, sel_x1, sel_y1)
	sel_x1 = -1
	sel_y1 = -1
end

local function dragDistance(self, x, y)
	return math.abs(drag_x1 - x) + math.abs(drag_y1 - y)
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed

	if action_id == hash("mouse_button_left") then
		-- What block was touched or dragged over?
		local model_x = math.floor((action.x - edge) / blocks_center_spacing)
		local model_y = convertY(math.floor((action.y - bottom_edge) / blocks_center_spacing))

		if model_x < 0 or model_x >= board_width or model_y < 0 or model_y >= board_height or self.board[model_x][model_y] == nil then
			-- outside board.
			return false -- pass input
		end

		local input_chip = self.board[model_x][model_y]

		if action.pressed then
			print("pressed", input_chip.id)
			if not hasSelection(self) then
				-- ничего не выделено
				if not hasDragging(self) then
					-- ничего не перетягивали, помечаем для перетягивания
					setDrag1(self, model_x, model_y)
				end
			end
		elseif action.released then
			print("released", input_chip.id)
			if hasDragging(self) and dragDistance(self, model_x, model_y) > 0 then
				-- перетянули в новое место, делаем своп
				myextension.trySwap(drag_x1, drag_y1, model_x, model_y)
				resetDrag(self)
            else
				-- оставили в том же месте
				resetDrag(self)
                if not hasSelection(self) then
                    -- первая не выбрана, выбираем
					setSelected(self, model_x, model_y)
                else
					-- первая выбрана выделение снимается в любом случае
                    if sel_x1 ~= model_x or sel_y1 ~= model_y then
					 	-- ткнули в новую, свапаем
						myextension.trySwap(sel_x1, sel_y1, model_x, model_y)
					end
					resetSelected(self)
                end
            end
		else
			-- hover
			print("hover", input_chip.id)
			if hasDragging(self) then
				-- что-то тянем
	            if (drag_x2 ~= model_x or drag_y2 ~= model_y) then
					if (drag_x2 ~= -1 and drag_y2 ~= -1) and dragDistance(self, drag_x2, drag_y2) > 0 then
						resetAnimation(self, drag_x2, drag_y2)
	                end
					setDrag2(self, model_x, model_y)
				end
			end
		end
	end

	return false -- pass input
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
